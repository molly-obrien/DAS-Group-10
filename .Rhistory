parametric_model <- survival_reg(mode = "regression",
dist = "weibull") %>%
set_engine("flexsurv")
# Define a Weibull parametric survival regression model
parametric_model <- survival_reg(mode = "regression",
dist = "weibull") %>%
set_engine("survival")
# Define a Weibull parametric survival regression model
parametric_model <- survival_reg(mode = "censored regression",
dist = "weibull") %>%
set_engine("flexsurv")
# Create a recipe
surv_recipe <- recipe(Surv(time, status) ~ trt + age + celltype + karno + diagtime + prior,
data = veteran) %>%
step_normalize(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors())
library(survival)
# Create a recipe
surv_recipe <- recipe(Surv(time, status) ~ trt + age + celltype + karno + diagtime + prior,
data = veteran) %>%
step_normalize(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors())
# Create a recipe
surv_recipe <- recipe(surv(time, status) ~ trt + age + celltype + karno + diagtime + prior,
data = veteran) %>%
step_normalize(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors())
#| echo: false
#| warning: false
#| message: false
#|
# Load the necessary libraries
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(gt)
library(MASS)
library(patchwork)
library(moderndive)
library(survival)
library(dplyr)
# Create a recipe
surv_recipe <- recipe(survival::Surv(time, status) ~ trt + age + celltype + karno + diagtime + prior,
data = veteran) %>%
step_normalize(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors())
?Surv
# Create a recipe
surv_recipe <- recipe(Surv(time, status) ~ trt + age + celltype + karno + diagtime + prior,
data = veteran) %>%
step_normalize(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors())
# Create a recipe
surv_recipe <- recipe(time + status ~ trt + age + celltype + karno + diagtime + prior,
data = veteran) %>%
update_role(time, status, new_role = "outcome") %>%
step_normalize(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors())
surv_workflow <- workflow() %>%
add_model(parametric_model) %>%
add_recipe(surv_recipe)
library(censored)
surv_workflow <- workflow() %>%
add_model(parametric_model) %>%
add_recipe(surv_recipe)
surv_fit <- surv_workflow %>% fit(data = veteran)
library(survflex)
install.packages("survflex")
library(survflex)
library(survflex)
install.packages("flexsurv")
library(flexsurv)
surv_fit <- surv_workflow %>% fit(data = veteran)
parametric_model <- censored_reg(dist = "weibull") %>%
set_engine("flexsurv")
?censored_reg
??censored_reg
library(parsnip)
# Define the model using censored_reg()
parametric_model <- censored_reg(dist = "weibull") %>%
set_engine("flexsurv")
veteran <- veteran %>%
mutate(
trt = as.factor(trt),
celltype = as.factor(celltype)
)
weibull_fit
# Define a Weibull parametric survival regression model
parametric_model <- survival_reg(mode = "censored regression",
dist = "weibull") %>%
set_engine("flexsurv")
# Create a recipe
surv_recipe <- recipe(time + status ~ trt + age + celltype + karno + diagtime + prior,
data = veteran) %>%
update_role(time, status, new_role = "outcome") %>%
step_normalize(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors())
library(survival)
surv_workflow <- workflow() %>%
add_model(parametric_model) %>%
add_recipe(surv_recipe)
library(censored)
surv_fit <- surv_workflow %>% fit(data = veteran)
veteran <- veteran %>%
mutate(
status = ifelse(status == 1, 0, 1), # 1 = event, 0 = censored
trt = as.factor(trt),
celltype = as.factor(celltype)
)
# Define the model using censored_reg()
parametric_model <- censored_reg(dist = "weibull") %>%
set_engine("flexsurv")
veteran$status
library(tidymodels)
library(survival)
library(flexsurv)
# Load and preprocess the data
data(veteran)
veteran <- veteran %>%
mutate(
status = ifelse(status == 1, 0, 1), # Convert status: 1 = event, 0 = censored
trt = as.factor(trt),
celltype = as.factor(celltype)
)
# Define a parametric survival regression model (Weibull)
parametric_model <- survival_reg(mode = "censored regression", dist = "weibull") %>%
set_engine("flexsurv")
# Create a workflow using a formula (not a recipe)
surv_workflow <- workflow() %>%
add_model(parametric_model) %>%
add_formula(Surv(time, status) ~ trt + age + celltype + karno + diagtime + prior)
# Fit the model
surv_fit <- surv_workflow %>% fit(data = veteran)
# Display model results
extract_fit_parsnip(surv_fit) %>% print()
head(veteran)
# Display model results
extract_fit_parsnip(surv_fit) %>% print()
# Display model results
fit1 <- extract_fit_parsnip(surv_fit) %>% print()
tidy(fit1)
summary(fit1)
fit1
# Test different parametric models
exponential_model <- survival_reg(mode = "censored regression", dist = "exp") %>%
set_engine("flexsurv")
lognormal_model <- survival_reg(mode = "censored regression", dist = "lnorm") %>%
set_engine("flexsurv")
loglogistic_model <- survival_reg(mode = "censored regression", dist = "llogis") %>%
set_engine("flexsurv")
# Fit models
exp_fit <- workflow() %>% add_model(exponential_model) %>%
add_formula(Surv(time, status) ~ trt + age + celltype + karno + diagtime + prior) %>%
fit(data = veteran)
lnorm_fit <- workflow() %>% add_model(lognormal_model) %>%
add_formula(Surv(time, status) ~ trt + age + celltype + karno + diagtime + prior) %>%
fit(data = veteran)
llogis_fit <- workflow() %>% add_model(loglogistic_model) %>%
add_formula(Surv(time, status) ~ trt + age + celltype + karno + diagtime + prior) %>%
fit(data = veteran)
# Compare AIC values
AIC_values <- tibble(
Model = c("Weibull", "Exponential", "Log-normal", "Log-logistic"),
AIC = c(
extract_fit_parsnip(surv_fit)$fit$AIC,
extract_fit_parsnip(exp_fit)$fit$AIC,
extract_fit_parsnip(lnorm_fit)$fit$AIC,
extract_fit_parsnip(llogis_fit)$fit$AIC
)
)
print(AIC_values)
cox_model <- coxph(Surv(time, status) ~ trt + age + celltype + karno + diagtime + prior, data = veteran)
# Check proportional hazards assumption
cox.zph(cox_model)
summary(surv_fit$fit)  # Check p-values and confidence intervals
tidy(fit1)
surv_workflow <- workflow() %>%
add_model(parametric_model) %>%
add_formula(Surv(time, status) ~ trt + age + celltype + karno + diagtime)
# Fit the model
surv_fit <- surv_workflow %>% fit(data = veteran)
# Display model results
fit2 <- extract_fit_parsnip(surv_fit) %>% print()
fit2
tidy(fit2)
surv_workflow <- workflow() %>%
add_model(parametric_model) %>%
add_formula(Surv(time, status) ~ celltype + karno )
# Fit the model
surv_fit <- surv_workflow %>% fit(data = veteran)
# Display model results
fit2 <- extract_fit_parsnip(surv_fit) %>% print()
tidy(fit2)
extract_fit_parsnip(surv_fit)$fit$AIC
surv_workflow <- workflow() %>%
add_model(parametric_model) %>%
add_formula(Surv(time, status) ~ trt + celltype + karno )
# Fit the model
surv_fit <- surv_workflow %>% fit(data = veteran)
# Display model results
fit2 <- extract_fit_parsnip(surv_fit) %>% print()
tidy(fit2)
extract_fit_parsnip(surv_fit)$fit$AIC
head(veteran)
surv_workflow <- workflow() %>%
add_model(parametric_model) %>%
add_formula(Surv(time, status) ~celltype + karno )
# Fit the model
surv_fit <- surv_workflow %>% fit(data = veteran)
# Display model results
fit2 <- extract_fit_parsnip(surv_fit) %>% print()
tidy(fit2)
extract_fit_parsnip(surv_fit)$fit$AIC
extract_fit_parsnip(surv_fit)$fit
tidy(fit2)
# Fit Weibull model using flexsurv
weibull_fit <- flexsurvreg(Surv(time, status) ~ karno + celltype,
data = veteran, dist = "weibull")
# Plot Weibull model vs Kaplan-Meier curve
plot(weibull_fit, ci = TRUE)
cox_model <- coxph(Surv(time, status) ~ karno + celltype, data = veteran)
# Check proportional hazards assumption
cox.zph(cox_model)
# Load necessary libraries
library(tidymodels)
library(survival)
library(flexsurv)
library(survminer)
# Fit a Weibull AFT model
weibull_aft_fit <- flexsurvreg(Surv(time, status) ~ karno + celltype,
data = veteran, dist = "weibull")
# View model summary
summary(weibull_aft_fit)
# Function to fit an AFT model and return AIC
fit_aft_model <- function(dist) {
model <- flexsurvreg(Surv(time, status) ~ karno + celltype,
data = veteran, dist = dist)
return(model$AIC)
}
# Compare Weibull, Log-Normal, and Log-Logistic AFT models
aft_aic_values <- tibble(
Model = c("Weibull (AFT)", "Log-Normal", "Log-Logistic"),
AIC = c(
fit_aft_model("weibull"),
fit_aft_model("lnorm"),
fit_aft_model("llogis")
)
)
# Print AIC values
print(aft_aic_values)
plot(weibull_aft_fit, ci = TRUE)
plot(weibull_aft_fit, ci = TRUE)
veteran$status
#| label: tbl-cox
#| tbl-cap: Cox-proportional Hazards Assumption Check:
cox_model <- coxph(Surv(time, status) ~ karno + celltype, data = veteran)
cox.zph(cox_model)
#| label: tbl-cox
#| tbl-cap: Cox-proportional Hazards Assumption Check
cox_model <- coxph(Surv(time, status) ~ karno + celltype, data = veteran)
cox.zph(cox_model)
#| label: tbl-cox
#| tbl-cap: Cox-proportional Hazards Assumption Check
?coxph
#| label: tbl-cox
#| tbl-cap: Cox-proportional Hazards Assumption Check
cox_model <- coxph(Surv(time, status) ~ karno + celltype, data = veteran)
?Surv
?cox.zph
rm(cox_model)
cox_model <- coxph(Surv(time, status) ~ karno + celltype, data = veteran)
cox.zph(cox_model)
plot(weibull_aft_fit, ci = TRUE)
plot(weibull_aft_fit, ci = TRUE)
#| fig-cap: Weibull model survival plot
weibull_aft_fit <- flexsurvreg(Surv(time, status) ~ karno + celltype,
data = veteran, dist = "weibull")
plot(weibull_aft_fit, ci = TRUE)
library(flexsurv)
library(survminer)
# Function to fit an AFT model and return AIC
fit_aft_model <- function(dist) {
model <- flexsurvreg(Surv(time, status) ~ karno + celltype,
data = veteran, dist = dist)
return(model$AIC)
}
# Print AIC values
print(aft_aic_values)
plot(weibull_aft_fit, ci = TRUE)
weibull_aft_fit <- flexsurvreg(Surv(time, status) ~ karno + celltype,
data = veteran, dist = "weibull")
summary(weibull_aft_fit)
tidy(weibull_aft_fit)
# Load necessary libraries
library(dplyr)
library(knitr)
# Extract survival probabilities from Weibull AFT model
weibull_summary <- summary(weibull_aft_fit)$time
# Convert to a data frame with better labels
weibull_table <- tibble(
Time = weibull_summary,
Estimate = summary(weibull_aft_fit)$est,
Lower_95_CI = summary(weibull_aft_fit)$lcl,
Upper_95_CI = summary(weibull_aft_fit)$ucl
)
# Print a nicely formatted table
kable(weibull_table, digits = 4, caption = "Weibull AFT Model Survival Estimates")
# Extract survival probabilities from Weibull AFT model
weibull_summary <- summary(weibull_aft_fit)$time
# Convert to a data frame with better labels
weibull_table <- tibble(
Time = weibull_summary,
Estimate = summary(weibull_aft_fit)$est,
Lower_95_CI = summary(weibull_aft_fit)$lcl,
Upper_95_CI = summary(weibull_aft_fit)$ucl
)
# Print a nicely formatted table
kable(weibull_table, digits = 4, caption = "Weibull AFT Model Survival Estimates")
weibull_aft_fit
weibull_table
library(knitr)
# Load necessary libraries
library(dplyr)
# Extract survival probabilities from Weibull AFT model
weibull_summary <- summary(weibull_aft_fit)$time
library(dplyr)
library(knitr)
# Extract survival probabilities from Weibull AFT model
weibull_summary <- summary(weibull_aft_fit)$time
# Convert to a data frame with better labels
weibull_table <- tibble(
Time = weibull_summary,
Estimate = summary(weibull_aft_fit)$est,
Lower_95_CI = summary(weibull_aft_fit)$lcl,
Upper_95_CI = summary(weibull_aft_fit)$ucl
)
# Print a nicely formatted table
kable(weibull_table, digits = 4, caption = "Weibull AFT Model Survival Estimates")
# Extract survival probabilities from Weibull AFT model
weibull_summary <- summary(weibull_aft_fit)$time
weibull_summary
summary(weibull_aft_fit)
summary(weibull_aft_fit)$time
summary(weibull_aft_fit)[,1]
summary(weibull_aft_fit[,1])
weibull_aft_fit
weibull_aft_fit
summary(weibull_aft_fit)
summary(weibull_aft_fit)$time
library(dplyr)
library(knitr)
# Extract summary data from the Weibull AFT model
weibull_summary <- as.data.frame(summary(weibull_aft_fit))
# Select relevant columns and rename them
weibull_table <- weibull_summary %>%
select(time, est, lcl, ucl) %>%
rename(
Time = time,
Estimate = est,
Lower_95_CI = lcl,
Upper_95_CI = ucl
)
# Extract summary data from the Weibull AFT model
weibull_summary <- as.data.frame(summary(weibull_aft_fit))
weibull_summary
library(dplyr)
library(knitr)
library(gt)
# Extract survival estimates from the Weibull AFT model
weibull_summary <- summary(weibull_aft_fit, type = "survival")
# Convert to a properly structured dataframe
weibull_table <- tibble(
Time = weibull_summary[[1]]$time,      # Extract time points
Estimate = weibull_summary[[1]]$est,   # Survival probability estimates
Lower_95_CI = weibull_summary[[1]]$lcl, # Lower confidence limit
Upper_95_CI = weibull_summary[[1]]$ucl  # Upper confidence limit
)
# Display a clean table using kable
kable(weibull_table, digits = 4, caption = "Weibull AFT Model Survival Estimates")
# Display formatted table using gt
weibull_table %>%
gt() %>%
tab_header(title = "Weibull AFT Model Survival Estimates") %>%
fmt_number(columns = c(Estimate, Lower_95_CI, Upper_95_CI), decimals = 4) %>%
cols_label(
Time = "Time (Days)",
Estimate = "Survival Probability",
Lower_95_CI = "Lower 95% CI",
Upper_95_CI = "Upper 95% CI"
) %>%
tab_options(
table.border.top.width = px(2),
table.border.bottom.width = px(2),
table_body.border.bottom.width = px(1)
)
coef(weibull_aft_fit)
predict(weibull_aft_fit)
plot_data <- summary(weibull_aft_fit, type = "survival")
plot_data
tidy(weibull_aft_fit)
tidy(weibull_aft_fit)
#| echo: false
#| warning: false
#| message: false
#|
# Load the necessary libraries
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(gt)
library(MASS)
library(patchwork)
library(moderndive)
library(survival)
library(dplyr)
library(flexsurv)
library(survminer)
tidy(weibull_aft_fit)
#| label: tbl-model
#| fig-cap: AFT Weibull Model
weibull_aft_fit <- flexsurvreg(Surv(time, status) ~ karno + celltype,
data = veteran, dist = "weibull")
tidy(weibull_aft_fit)
tidy(weibull_aft_fit)
#| echo: false
#| warning: false
#| message: false
#|
# Load the necessary libraries
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(gt)
library(MASS)
library(patchwork)
library(moderndive)
library(survival)
library(dplyr)
library(flexsurv)
library(survminer)
tidy(weibull_aft_fit)
library(tidyr)
library(ggplot2)
library(moderndive)
library(sjPlot)
library(tidymodels)
library(broom)
library(performance)
library(faraway)
install.packages("faraway")
library(faraway)
library(palmerpenguins)
install.packages("palmerpenguins")
library(palmerpenguins)
library(tidyr)
turtles = faraway::turtle
turtles%>% glimpse()
turtles = turtles %>%
mutate(totals = male+female,
male_props = male/totals)
turtles
ggplot(turtles,aes(y= male_props,x=temp))+
geom_point()+
labs(y="proportion of male hatchlings",x = "temperature")
model_turtles <- glm(cbind(male,female) ~ temp,
data = turtles,
family = binomial)
model_turtles %>% tidy(conf.int = T)
-61.32 + 2.21*27.5
exp(-0.545)
exp(-0.545)/ (1 - exp(-.545))
exp(-0.545)/ (1 + exp(-.545))
1- (exp(-0.545)/ (1 + exp(-.545)))
0.63297/ (1-0.63297)
exp(0.545)
1.724573/(1+1.724573)
turtles %>% select(temp) %>% unique()
plot_model(model_turtles,
type = "eff",
title = "",
terms="temp[temp_pred]",
axis.title = c("Temperature", "Prob. of a hatchling being male"))
plot_model(model_turtles,
type = "eff",
title = "",
terms="temp[temp_pred]",
axis.title = c("Temperature", "Prob. of a hatchling being male"))
library("effects")
plot_model(model_turtles,
type = "eff",
title = "",
terms="temp[temp_pred]",
axis.title = c("Temperature", "Prob. of a hatchling being male"))
temp_pred = seq(27,30,by=0.01)
plot_model(model_turtles,
type = "eff",
title = "",
terms="temp[temp_pred]",
axis.title = c("Temperature", "Prob. of a hatchling being male"))
-61.32 + 2.21*28.5
exp(-61.32 + 2.21*28.5)
exp(-61.32 + 2.21*28.5) / (1 + exp(-61.32 + 2.21*28.5))
dataset <- read.csv("DAProject16.csv")
setwd("C:/Users/Theo/Documents/Documents/Github/DAS-Group-10")
dataset <- read.csv("DAProject16.csv")
library(tidymodels)
library(parsnip)
library(magrittr)
library(dplyr)
library(ggplot2)
dataset$Post2004 <- ifelse(dataset$Year >= 2004, 1, 0)
qchisq(0.95, df = 703)
